
/**author hhbhuner**/
const RECORD_TYPE = {
    UPLOAD: 1,
    UPLOAD_NEW_PIC: 2,
    ASSERT: 1
};
const RECORD_OPTION_DATA = {
    replay_id: '',
    events: [],
    record_id: '',
    action: '',
    serial: ''
};
const recordCaseId = 'record_' + new Date().getTime();
const ignoreClassName = 'rr-ignore rr-block';
const commonStyle = 'position: fixed; left: 0px; z-index: 10000; width: 42px; height: 42px; cursor: pointer; font-size: 16px; border: 0; padding: 6px; opacity: 0.7;';
const rrwebRecordScript = document.createElement('script');
const html2canvasScript = document.createElement('script');
const dom2imgScript = document.createElement('script');
const axiosScript = document.createElement('script');
const startBtn = document.createElement('button');
const autoPlay = document.createElement('button');
const message = document.createElement('div');
message.style.cssText = 'position: fixed;z-index: 99998999;top:0;right:0;bottom:0;left:0;margin:auto;background:rgba(0,0,0,1);opacity:0.8;padding: 0px 18px;display: inline-block;color: #fff;border-radius: 5px;width: max-content;height: 50px;line-height: 50px;';
message.innerText = '上传中';
const saveBtn = document.createElement('button');
const style = document.createElement('style');
const feedBackStyle = document.createTextNode('.clickFeedBack { outline: red dotted thick !important  }');
style.appendChild(feedBackStyle);
dom2imgScript.src = 'https://cdn.jsdelivr.net/npm/dom-to-image@2.6.0/src/dom-to-image.min.js';
rrwebRecordScript.src = 'https://jichujishu-test.oss-cn-beijing.aliyuncs.com/recordVideo/rrweb.min.js';
html2canvasScript.src = 'https://cdn.bootcdn.net/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js';
axiosScript.src = 'https://cdn.jsdelivr.net/npm/axios@0.21.1/dist/axios.min.js';
let request;
axiosScript.onload = () = >{
    request = window.axios.create({
        baseURL: '//127.0.0.1:8091'
    });
    getRecordStatus();
};
startBtn.innerHTML = '录制';
autoPlay.innerHTML = '本地回放';
startBtn.id = 'startBtn';
startBtn.className = ignoreClassName;
autoPlay.id = 'autoPlay';
saveBtn.innerHTML = '上传';
saveBtn.className = ignoreClassName;
autoPlay.className = ignoreClassName;
startBtn.style.cssText = commonStyle + 'top: 20px;';
autoPlay.style.cssText = commonStyle + 'top: 160px; height: 80px';
saveBtn.style.cssText = commonStyle + 'top: 80px;';
startBtn.onclick = startAction;
autoPlay.onclick = localAutoPlay;
saveBtn.onclick = saveData;
const showScreenShot = document.createElement('div');
showScreenShot.className = ignoreClassName;
showScreenShot.style.cssText = commonStyle + 'top: 400px; height: 80px';
showScreenShot.innerHTML = '展示截屏';
showScreenShot.onclick = showScreenShotFN;
let playing = true;
let pauseAdd = 0;
if (rrwebRecordScript.addEventListener) {
    rrwebRecordScript.addEventListener('load', () = >{
        window.rrweb.record.createPlayBtn();
    },
    false);
} else if (rrwebRecordScript.attachEvent) {
    rrwebRecordScript.attachEvent('onreadystatechange', () = >{
        window.rrweb.record.createPlayBtn();
    });
}
setTimeout(() = >{
    document.body.append(rrwebRecordScript, dom2imgScript, html2canvasScript, axiosScript, startBtn, autoPlay, saveBtn, style);
},
1000);
function getRecordStatus() {
    request({
        url: '/v1/uitest/get_action',
        method: 'get',
    }).then(res = >{
        if (res.data.code === 0) {
            const {
                data
            } = res.data;
            const status = data.action;
            RECORD_OPTION_DATA.record_id = data.record_id;
            RECORD_OPTION_DATA.replay_id = data.replay_id;
            RECORD_OPTION_DATA.serial = data.serial;
            RECORD_OPTION_DATA.action = status;
            if (RECORD_OPTION_DATA.action === 'record') {
                RECORD_OPTION_DATA.events = [];
            } else if (status === 'replay') {
                document.body.removeChild(startBtn);
                document.body.removeChild(saveBtn);
                document.body.removeChild(autoPlay);
                if (data.script.length === 0) {
                    alert("回放数据为空");
                    return
                }
                RECORD_OPTION_DATA.events = data.script;
                setTimeout(() = >{
                    autoPlayFN();
                },
                3000);
            }
        } else {
            showMessage(res.data.message)
        }
    });
}
const scale = window.devicePixelRatio;
function showScreenShotFN() {
    window.html2canvas(document.body, {
        scale: 1,
        useCORS: true,
    }).then(canvas = >{
        const clipImg = new Image();
        const clipImgBase64 = window.clipCanvas.toDataURL();
        console.log(clipImgBase64);
        clipImg.src = clipImgBase64;
        document.body.append(clipImg);
    });
}
async
function getAssertPic(target, action) {
    await new Promise((res, rej) = >{
        window.domtoimage.toBlob(target).then(dataUrl = >{
            if (dataUrl !== null) {
                const reader = new FileReader();
                reader.readAsDataURL(dataUrl);
                reader.onload = function(e) {
                    action.data.base64 = e.target.result;
                    action.data.flag = 'new';
                    return res();
                };
            } else {
                window.html2canvas(target, {
                    scale: 1,
                    useCORS: true,
                }).then(canvas = >{
                    const clipImgBase64 = canvas.toDataURL();
                    action.data.base64 = clipImgBase64;
                    action.data.flag = 'new';
                    return res();
                });
            }
        }).
        catch(error = >{
            console.error('oops, something went wrong!', error);
            playing = false;
            return rej(error);
        });
    });
}
function addDelay(event, baselineTime) {
    event.delay = event.timestamp - baselineTime;
    return event.delay;
}
function getDomFormXpath(xpath) {
    const result = document.evaluate(xpath, document, null, XPathResult.ANY_TYPE, null);
    return result.iterateNext();
}
async
function doSomething(action, index) {
    console.log('replay--', index, action);
    const {
        optionName,
        assert,
        data: {
            xpath,
            source,
            x = 0,
            y = 0,
            text = ''
        }
    } = action;
    let currentElement;
    if (optionName === 'Click' && assert === 1) {
        if (! (xpath.includes('startBtn') || xpath.includes('playBtn') || xpath.includes('autoPlay'))) {
            currentElement = getDomFormXpath(xpath);
            try {
                await new Promise((resolve, reject) = >{
                    var intersectionObserver = new IntersectionObserver(([change]) = >{
                        if (!change.isVisible) {
                            console.log('覆盖了 覆盖了 注意点~~ ');
                        }
                        intersectionObserver.disconnect();
                        return resolve(true);
                    },
                    {
                        threshold: [1.0],
                        delay: 100,
                        trackVisibility: true,
                    });
                    intersectionObserver.observe(currentElement);
                });
                if (currentElement) {
                    await getAssertPic(currentElement, action);
                    playing = true;
                    currentElement.click();
                } else {
                    playing = false;
                    console.log('click 回放出错误 current', index);
                }
            } catch(_) {
                playing = false;
                console.log('click 回放出错误', index);
            }
        }
    } else if (optionName === 'input' && source === 5 && !xpath.includes('__vc_log_default')) {
        try {
            currentElement = getDomFormXpath(xpath);
            currentElement.value = text;
            playing = true;
        } catch(_) {
            playing = false;
            console.log('回放出错误 input error', index);
        }
    } else if (optionName === 'scroll') {
        if (xpath === '/html/body') {
            window.scroll(x, y);
        } else {
            const target = getDomFormXpath(xpath);
            target.scroll(x, y);
        }
    }
}
let raf = null;
function autoPlayFN(flag) {
    if (raf) {
        cancelAnimationFrame(raf);
        raf = null;
    }
    if (flag === 'localAutoPlay') {
        RECORD_OPTION_DATA.events = JSON.parse(localStorage.getItem('events')) || [];
    }
    const actions = RECORD_OPTION_DATA.events;
    actions.sort((a1, a2) = >a1.delay - a2.delay);
    let lastTimestamp = performance.now();
    let timeOffset = 0;
    let baselineTime = new Date().getTime();
    if (actions[0] && actions[0].timestamp) {
        baselineTime = actions[0].timestamp;
    }
    for (const event of actions) {
        addDelay(event, baselineTime);
    }
    let index = 0;
    async
    function start() {
        const time = performance.now();
        timeOffset += time - lastTimestamp;
        lastTimestamp = time;
        while (actions.length !== index && playing) {
            const action = actions[index];
            if (timeOffset >= action.delay) {
                if (action.optionName === 'Click') {
                    action.data.base64 = '';
                    action.data.flag = 'old';
                }
                await doSomething(action, index);
                if (playing) {
                    index++;
                    pauseAdd = 0;
                } else {
                    console.log('查找中');
                }
            } else {
                break;
            }
        }
        if (actions.length - index > 0 || self.liveMode) {
            if (playing) {
                raf = requestAnimationFrame(start);
            } else if (pauseAdd < 100) {
                setTimeout(() = >{
                    playing = true;
                    pauseAdd++;
                    raf = requestAnimationFrame(start);
                },
                16);
            } else if (pauseAdd >= 100) {
                index++;
                raf = requestAnimationFrame(start);
            }
        } else if (flag !== 'localAutoPlay') {
            saveData(null, true);
        }
    }
    raf = requestAnimationFrame(start);
}
function localAutoPlay() {
    autoPlayFN('localAutoPlay');
}
let stopFn = function() {};
let recordOnce = false;
function startAction() {
    if (recordOnce) {
        return;
    }
    request({
        url: '/v1/uitest/start_record',
        method: 'post'
    }).then(res = >{
        if (res.data.code === 0) {
            const confirmStart = window.confirm('确认开始录制？');
            if (confirmStart) {
                recordOnce = true;
                RECORD_OPTION_DATA.events = [];
                stopFn = window.rrweb.record({
                    emit(event) {
                        RECORD_OPTION_DATA.events.push(event);
                    },
                    sampling: {
                        mousemove: false,
                        scroll: 150,
                        input: 'last'
                    }
                });
            }
        } else {
            alert(res.data.message);
        }
    });
}
function saveData(_, type) {
    stopFn();
    const newEvents = [];
    const storageArr = [];
    if (type) {
        localStorage.setItem('events', JSON.stringify(RECORD_OPTION_DATA.events));
    } else {
        RECORD_OPTION_DATA.events.forEach((item, index) = >{
            let newObj = item;
            if (item.optionName === 'Click') {
                newObj = {...item,
                    data: {
                        xpath: item.data.xpath,
                        optionName: item.data.optionName
                    }
                };
            }
            if (item.optionName === 'Click' && !item.data.base64) {
                return;
            }
            if (item.type === 2) {
                if (item.data.node) {
                    item.data.node = {};
                }
            } else if (item.optionName === 'domChange') {
                Object.assign(item.data, {
                    add: [],
                    attributes: [],
                    removes: []
                });
            }
            storageArr.push(newObj);
            newEvents.push(item);
        });
        localStorage.setItem('events', JSON.stringify(storageArr));
    }
    if (RECORD_OPTION_DATA.action === 'replay') {
        if (RECORD_OPTION_DATA.events.length === 0) {
            alert('保存数据为空');
            return;
        }
        request({
            method: 'post',
            url: '/v1/uitest/save_replay',
            data: {...RECORD_OPTION_DATA,
                replay_data: RECORD_OPTION_DATA.events,
            }
        }).then(res = >{
            if (res.data.code === 0) {
                alert('回放成功');
            } else {
                alert('回放失败');
            }
        });
    } else {
        showMessage('上传中');
        request({
            method: 'post',
            url: '/v1/uitest/upload_record',
            data: {
                sign: recordCaseId,
                record_script: newEvents
            }
        }).then(res = >{
            if (res.data.code === 0) {
                alert('save');
            } else {
                alert(res.data.message);
            }
        },
        () = >{
            alert('save error');
        });
    }
}
function showMessage(text) {
    message.innerText = text;
    document.body.append(message);
    setTimeout(() = >{
        document.body.removeChild(message);
    },
    1000);
}
